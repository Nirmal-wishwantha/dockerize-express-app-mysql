name: Express API CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -p${MYSQL_ROOT_PASSWORD}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=20
          --health-start-period=30s
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Run Linter
        run: npm run lint || echo "Linting failed but continuing"
      - name: Run Tests
        run: npm test
        env:
          DB_HOST: db
          DB_USER: root
          DB_PASSWORD: root
          DB_NAME: test_db
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-results.xml  # Matches jest-junit output

  security-scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Dependencies
        run: npm ci
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
      - name: Run SAST Scan
        uses: github/codeql-action/analyze@v2
      - name: Run npm audit
        run: npm audit --production
      - name: Check for Vulnerabilities
        run: |
          if [ $(npm audit --json | jq -r '.vulnerabilities | length') -gt 0 ]; then
            echo "Vulnerabilities found. Failing build."
            exit 1
          fi

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Dependencies
        run: npm ci
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            your-org/express-api:${{ github.sha }}
            your-org/express-api:latest
          cache-from: type=registry,ref=your-org/express-api:latest
          cache-to: type=inline

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /path/to/deploy/directory
            docker-compose pull
            docker-compose down --remove-orphans
            docker-compose up -d --build
            docker system prune -f
      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sleep 10
            curl -f http://<deployed-ip>:3000/health || exit 1

  cleanup:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Artifacts
        run: |
          echo "Cleaning up old artifacts and caches"