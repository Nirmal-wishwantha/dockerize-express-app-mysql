name: Express API CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: acpt
          MYSQL_DATABASE: wemixt
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -p${MYSQL_ROOT_PASSWORD}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=20
          --health-start-period=30s
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Run Linter
        run: npm run lint || echo "Linting failed but continuing"
      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -pacpt --silent; do
            echo 'Waiting for MySQL...'
            sleep 2
          done
      - name: Run Tests
        run: npm run test:ci
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: acpt
          DB_NAME: wemixt
          NODE_ENV: test
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./test-results.xml
            ./coverage/
        continue-on-error: true

  security-scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Install Dependencies
        run: npm ci
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Run SAST Scan
        uses: github/codeql-action/analyze@v3
      - name: Run npm audit
        run: npm audit --production --audit-level=moderate
        continue-on-error: true
      - name: Check for High Severity Vulnerabilities
        run: |
          AUDIT_RESULT=$(npm audit --json --audit-level=high 2>/dev/null || echo '{"vulnerabilities":{}}')
          HIGH_VULNS=$(echo $AUDIT_RESULT | jq -r '.vulnerabilities | length')
          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "High severity vulnerabilities found: $HIGH_VULNS"
            npm audit --audit-level=high
            exit 1
          else
            echo "No high severity vulnerabilities found"
          fi

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Install Dependencies
        run: npm ci --production
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/express-api:${{ github.sha }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/express-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/express-api:latest
          cache-to: type=inline
          platforms: linux/amd64,linux/arm64

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            cd /path/to/deploy/directory
            
            # Update docker-compose with new image
            export IMAGE_TAG=${{ github.sha }}
            
            # Pull latest images
            docker-compose pull
            
            # Stop and remove old containers
            docker-compose down --remove-orphans
            
            # Start new containers
            docker-compose up -d --build
            
            # Clean up unused images
            docker image prune -f
            
            # Wait for services to be healthy
            sleep 15
      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            # Wait for application to start
            sleep 10
            
            # Check if the service is running
            if curl -f -m 30 http://localhost:3000/health; then
              echo "Deployment successful - Health check passed"
            else
              echo "Deployment failed - Health check failed"
              # Rollback if health check fails
              cd /path/to/deploy/directory
              docker-compose down
              docker-compose up -d --build
              exit 1
            fi

  cleanup:
    needs: [deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Artifacts
        run: |
          echo "Cleaning up old artifacts and caches"
          # Add any cleanup commands here
      - name: Notify Deployment Status
        if: always()
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment completed successfully"
          else
            echo "❌ Deployment failed or was skipped"
          fi